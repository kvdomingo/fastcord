# Code generated by sqlc. DO NOT EDIT.
# versions:
#   sqlc v1.29.0
# source: guilds.sql
from typing import AsyncIterator, Iterator, Optional

import sqlalchemy
import sqlalchemy.ext.asyncio

from app.db.generated import models


CREATE_GUILD = """-- name: create_guild \\:one
INSERT INTO guilds (
    name, avatar, banner, owner_id
)
VALUES (
           :p1, :p2, :p3, :p4
       )
RETURNING id, created, modified, name, avatar, banner, owner_id
"""


DELETE_GUILD = """-- name: delete_guild \\:one
DELETE
FROM guilds
WHERE id = :p1
RETURNING id
"""


RETRIEVE_GUILD = """-- name: retrieve_guild \\:one
SELECT id, created, modified, name, avatar, banner, owner_id
FROM guilds
WHERE id = :p1
"""


RETRIEVE_GUILDS = """-- name: retrieve_guilds \\:many
SELECT id, created, modified, name, avatar, banner, owner_id
FROM guilds
"""


UPDATE_GUILD = """-- name: update_guild \\:one
UPDATE guilds
SET name   = COALESCE(:p1, name),
    avatar = COALESCE(:p2, avatar),
    banner = COALESCE(:p3, banner)
WHERE id = :p4
RETURNING id, created, modified, name, avatar, banner, owner_id
"""


class Querier:
    def __init__(self, conn: sqlalchemy.engine.Connection):
        self._conn = conn

    def create_guild(
        self, *, name: str, avatar: Optional[str], banner: Optional[str], owner_id: str
    ) -> Optional[models.Guild]:
        row = self._conn.execute(
            sqlalchemy.text(CREATE_GUILD),
            {
                "p1": name,
                "p2": avatar,
                "p3": banner,
                "p4": owner_id,
            },
        ).first()
        if row is None:
            return None
        return models.Guild(
            id=row[0],
            created=row[1],
            modified=row[2],
            name=row[3],
            avatar=row[4],
            banner=row[5],
            owner_id=row[6],
        )

    def delete_guild(self, *, id: str) -> Optional[str]:
        row = self._conn.execute(sqlalchemy.text(DELETE_GUILD), {"p1": id}).first()
        if row is None:
            return None
        return row[0]

    def retrieve_guild(self, *, id: str) -> Optional[models.Guild]:
        row = self._conn.execute(sqlalchemy.text(RETRIEVE_GUILD), {"p1": id}).first()
        if row is None:
            return None
        return models.Guild(
            id=row[0],
            created=row[1],
            modified=row[2],
            name=row[3],
            avatar=row[4],
            banner=row[5],
            owner_id=row[6],
        )

    def retrieve_guilds(self) -> Iterator[models.Guild]:
        result = self._conn.execute(sqlalchemy.text(RETRIEVE_GUILDS))
        for row in result:
            yield models.Guild(
                id=row[0],
                created=row[1],
                modified=row[2],
                name=row[3],
                avatar=row[4],
                banner=row[5],
                owner_id=row[6],
            )

    def update_guild(
        self,
        *,
        name: Optional[str],
        avatar: Optional[str],
        banner: Optional[str],
        id: str,
    ) -> Optional[models.Guild]:
        row = self._conn.execute(
            sqlalchemy.text(UPDATE_GUILD),
            {
                "p1": name,
                "p2": avatar,
                "p3": banner,
                "p4": id,
            },
        ).first()
        if row is None:
            return None
        return models.Guild(
            id=row[0],
            created=row[1],
            modified=row[2],
            name=row[3],
            avatar=row[4],
            banner=row[5],
            owner_id=row[6],
        )


class AsyncQuerier:
    def __init__(self, conn: sqlalchemy.ext.asyncio.AsyncConnection):
        self._conn = conn

    async def create_guild(
        self, *, name: str, avatar: Optional[str], banner: Optional[str], owner_id: str
    ) -> Optional[models.Guild]:
        row = (
            await self._conn.execute(
                sqlalchemy.text(CREATE_GUILD),
                {
                    "p1": name,
                    "p2": avatar,
                    "p3": banner,
                    "p4": owner_id,
                },
            )
        ).first()
        if row is None:
            return None
        return models.Guild(
            id=row[0],
            created=row[1],
            modified=row[2],
            name=row[3],
            avatar=row[4],
            banner=row[5],
            owner_id=row[6],
        )

    async def delete_guild(self, *, id: str) -> Optional[str]:
        row = (
            await self._conn.execute(sqlalchemy.text(DELETE_GUILD), {"p1": id})
        ).first()
        if row is None:
            return None
        return row[0]

    async def retrieve_guild(self, *, id: str) -> Optional[models.Guild]:
        row = (
            await self._conn.execute(sqlalchemy.text(RETRIEVE_GUILD), {"p1": id})
        ).first()
        if row is None:
            return None
        return models.Guild(
            id=row[0],
            created=row[1],
            modified=row[2],
            name=row[3],
            avatar=row[4],
            banner=row[5],
            owner_id=row[6],
        )

    async def retrieve_guilds(self) -> AsyncIterator[models.Guild]:
        result = await self._conn.stream(sqlalchemy.text(RETRIEVE_GUILDS))
        async for row in result:
            yield models.Guild(
                id=row[0],
                created=row[1],
                modified=row[2],
                name=row[3],
                avatar=row[4],
                banner=row[5],
                owner_id=row[6],
            )

    async def update_guild(
        self,
        *,
        name: Optional[str],
        avatar: Optional[str],
        banner: Optional[str],
        id: str,
    ) -> Optional[models.Guild]:
        row = (
            await self._conn.execute(
                sqlalchemy.text(UPDATE_GUILD),
                {
                    "p1": name,
                    "p2": avatar,
                    "p3": banner,
                    "p4": id,
                },
            )
        ).first()
        if row is None:
            return None
        return models.Guild(
            id=row[0],
            created=row[1],
            modified=row[2],
            name=row[3],
            avatar=row[4],
            banner=row[5],
            owner_id=row[6],
        )
