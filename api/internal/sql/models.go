// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package sql

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type AvailabilityStatus string

const (
	AvailabilityStatusOnline  AvailabilityStatus = "online"
	AvailabilityStatusIdle    AvailabilityStatus = "idle"
	AvailabilityStatusDnd     AvailabilityStatus = "dnd"
	AvailabilityStatusOffline AvailabilityStatus = "offline"
)

func (e *AvailabilityStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = AvailabilityStatus(s)
	case string:
		*e = AvailabilityStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for AvailabilityStatus: %T", src)
	}
	return nil
}

type NullAvailabilityStatus struct {
	AvailabilityStatus AvailabilityStatus `json:"availability_status"`
	Valid              bool               `json:"valid"` // Valid is true if AvailabilityStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullAvailabilityStatus) Scan(value interface{}) error {
	if value == nil {
		ns.AvailabilityStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.AvailabilityStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullAvailabilityStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.AvailabilityStatus), nil
}

type ChannelType string

const (
	ChannelTypeText  ChannelType = "text"
	ChannelTypeVoice ChannelType = "voice"
)

func (e *ChannelType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ChannelType(s)
	case string:
		*e = ChannelType(s)
	default:
		return fmt.Errorf("unsupported scan type for ChannelType: %T", src)
	}
	return nil
}

type NullChannelType struct {
	ChannelType ChannelType `json:"channel_type"`
	Valid       bool        `json:"valid"` // Valid is true if ChannelType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullChannelType) Scan(value interface{}) error {
	if value == nil {
		ns.ChannelType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ChannelType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullChannelType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ChannelType), nil
}

type Channel struct {
	ID           string           `json:"id"`
	Created      pgtype.Timestamp `json:"created"`
	Modified     pgtype.Timestamp `json:"modified"`
	Name         string           `json:"name"`
	Guild        string           `json:"guild"`
	ChannelGroup pgtype.Text      `json:"channel_group"`
	Type         ChannelType      `json:"type"`
	IsGeneral    bool             `json:"is_general"`
	Order        pgtype.Int4      `json:"order"`
}

type ChannelGroup struct {
	ID       string           `json:"id"`
	Created  pgtype.Timestamp `json:"created"`
	Modified pgtype.Timestamp `json:"modified"`
	Name     string           `json:"name"`
	Guild    string           `json:"guild"`
	Order    pgtype.Int4      `json:"order"`
}

type Emoji struct {
	ID       string           `json:"id"`
	Created  pgtype.Timestamp `json:"created"`
	Modified pgtype.Timestamp `json:"modified"`
	Name     string           `json:"name"`
	Source   string           `json:"source"`
	Guild    string           `json:"guild"`
	Author   pgtype.Text      `json:"author"`
}

type Guild struct {
	ID       string           `json:"id"`
	Created  pgtype.Timestamp `json:"created"`
	Modified pgtype.Timestamp `json:"modified"`
	Name     string           `json:"name"`
	Avatar   pgtype.Text      `json:"avatar"`
	Banner   pgtype.Text      `json:"banner"`
}

type Message struct {
	ID       string           `json:"id"`
	Created  pgtype.Timestamp `json:"created"`
	Modified pgtype.Timestamp `json:"modified"`
	Author   pgtype.Text      `json:"author"`
	Channel  string           `json:"channel"`
	Content  string           `json:"content"`
	IsEdited bool             `json:"is_edited"`
}

type User struct {
	ID                 string             `json:"id"`
	Created            pgtype.Timestamp   `json:"created"`
	Modified           pgtype.Timestamp   `json:"modified"`
	Username           string             `json:"username"`
	Discriminator      int16              `json:"discriminator"`
	FullUsername       string             `json:"full_username"`
	Email              string             `json:"email"`
	Avatar             pgtype.Text        `json:"avatar"`
	Cover              pgtype.Text        `json:"cover"`
	AvailabilityStatus AvailabilityStatus `json:"availability_status"`
}

type UserGuildsOrder struct {
	User  string `json:"user"`
	Guild string `json:"guild"`
	Order int32  `json:"order"`
}
