// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: guilds.sql

package sql

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGuild = `-- name: CreateGuild :one
INSERT INTO guilds (name, avatar, banner)
VALUES ($1, $2, $3)
RETURNING id, created, modified, name, avatar, banner
`

type CreateGuildParams struct {
	Name   string      `json:"name"`
	Avatar pgtype.Text `json:"avatar"`
	Banner pgtype.Text `json:"banner"`
}

func (q *Queries) CreateGuild(ctx context.Context, arg CreateGuildParams) (Guild, error) {
	row := q.db.QueryRow(ctx, createGuild, arg.Name, arg.Avatar, arg.Banner)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Name,
		&i.Avatar,
		&i.Banner,
	)
	return i, err
}

const deleteGuild = `-- name: DeleteGuild :one
DELETE
FROM guilds
WHERE id = $1
RETURNING id
`

func (q *Queries) DeleteGuild(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRow(ctx, deleteGuild, id)
	err := row.Scan(&id)
	return id, err
}

const retrieveGuild = `-- name: RetrieveGuild :one
SELECT id, created, modified, name, avatar, banner
FROM guilds
WHERE id = $1
`

func (q *Queries) RetrieveGuild(ctx context.Context, id string) (Guild, error) {
	row := q.db.QueryRow(ctx, retrieveGuild, id)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Name,
		&i.Avatar,
		&i.Banner,
	)
	return i, err
}

const retrieveGuilds = `-- name: RetrieveGuilds :many
SELECT id, created, modified, name, avatar, banner
FROM guilds
LIMIT $2 OFFSET $1
`

type RetrieveGuildsParams struct {
	Offset int32 `json:"offset"`
	Limit  int32 `json:"limit"`
}

func (q *Queries) RetrieveGuilds(ctx context.Context, arg RetrieveGuildsParams) ([]Guild, error) {
	rows, err := q.db.Query(ctx, retrieveGuilds, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Guild
	for rows.Next() {
		var i Guild
		if err := rows.Scan(
			&i.ID,
			&i.Created,
			&i.Modified,
			&i.Name,
			&i.Avatar,
			&i.Banner,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGuild = `-- name: UpdateGuild :one
UPDATE guilds
SET name   = COALESCE($1, name),
    avatar = COALESCE($2, avatar),
    banner = COALESCE($3, banner)
WHERE id = $4
RETURNING id, created, modified, name, avatar, banner
`

type UpdateGuildParams struct {
	Name   pgtype.Text `json:"name"`
	Avatar pgtype.Text `json:"avatar"`
	Banner pgtype.Text `json:"banner"`
	ID     string      `json:"id"`
}

func (q *Queries) UpdateGuild(ctx context.Context, arg UpdateGuildParams) (Guild, error) {
	row := q.db.QueryRow(ctx, updateGuild,
		arg.Name,
		arg.Avatar,
		arg.Banner,
		arg.ID,
	)
	var i Guild
	err := row.Scan(
		&i.ID,
		&i.Created,
		&i.Modified,
		&i.Name,
		&i.Avatar,
		&i.Banner,
	)
	return i, err
}
